import streamlit as st
from openai import OpenAI
from parse_hh import get_html, extract_vacancy_data, extract_resume_data
import re


if "OPENAI_API_KEY" not in st.secrets:
    st.error("‚ùå –ö–ª—é—á OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .streamlit/secrets.toml")
    st.stop()

client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])


SYSTEM_PROMPT = """
–ü—Ä–æ—Å–∫–æ—Ä—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.

–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ—è—Å–Ω—è—Ç—å –æ—Ü–µ–Ω–∫—É.
–û—Ç–¥–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ (–ø–æ–Ω—è—Ç–Ω–æ –ª–∏, —Å –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç –∏ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∏—Ö —Ä–µ—à–∞–ª?) ‚Äî —ç—Ç–∞ –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.

‚ÄºÔ∏è –í –∫–æ–Ω—Ü–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ —Å—Ç—Ä–æ–∫—É —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –û—Ü–µ–Ω–∫–∞: X/10, –≥–¥–µ X ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤).
""".strip()




def request_gpt(system_prompt, user_prompt):
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        max_tokens=1000,
        temperature=0,
    )
    return response.choices[0].message.content

# UI
st.title('CV Scoring App')

job_description = st.text_area('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é')
cv = st.text_area('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ')

# üëá –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞, —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"):

     with st.spinner("–ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT..."):
        try:
            job_html = get_html(job_description).text
            resume_html = get_html(cv).text

            job_text = extract_vacancy_data(job_html)
            resume_text = extract_resume_data(resume_html)

            # üëá –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
            with st.expander("üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏"):
                st.markdown(job_text)

            # üëá –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—é–º–µ
            with st.expander("üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ"):
                st.markdown(resume_text)

            prompt = f"# –í–ê–ö–ê–ù–°–ò–Ø\n{job_text}\n\n# –†–ï–ó–Æ–ú–ï\n{resume_text}"
            response = request_gpt(SYSTEM_PROMPT, prompt)

            score_match = re.search(r'(\d{1,2})\s*/\s*10', response)
            if score_match:
                score = int(score_match.group(1))
                st.subheader("üî¢ –û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:")
                st.progress(min(score, 10) / 10)
                st.markdown(f"**{score}/10** ‚Äî —á–µ–º –≤—ã—à–µ, —Ç–µ–º –ª—É—á—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ.")
            else:
                st.info("‚ö†Ô∏è GPT –Ω–µ –≤—ã–¥–∞–ª —á–∏—Å–ª–æ–≤—É—é –æ—Ü–µ–Ω–∫—É ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–ø—Ç–∞.")

            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
            st.markdown(response)

        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

